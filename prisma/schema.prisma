generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

//TODO: Mirar si cambiamos los ids por otro tipo de id, como el uuid o el nanoid

model User {
  name                  String
  email                 String       @unique
  isVerified            Boolean      @default(false)
  identificationImgLink String?
  isActive              Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  role                  Role         @default(user)
  idNumber              String?
  idType                String       @default("cedula")
  phoneNumber           String?
  userId                String       @id @default(uuid())
  Investment            Investment[]
  Wallet                Wallet?
}

model Project {
  title                         String       @unique
  address                       String
  description                   String?
  projectValueTotal             BigInt?
  projectValueActual            BigInt?
  media                         String[]
  documents                     Json[]
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime     @updatedAt
  accountServicesCost           BigInt?
  basicEquipmentAndTestingCost  BigInt?
  bathrooms                     Int
  bedrooms                      Int
  builder                       String?
  cetificatesSNandRCost         BigInt?
  city                          String
  commonAreas                   String[]
  companiesIncorporationCost    BigInt?
  contigenciesFee               BigInt?
  country                       String
  department                    String
  endIncomeDate                 DateTime?
  finishingCost                 BigInt?
  incomeFromValuationAnnualCash Float?
  legalCost                     BigInt?
  projectLinks                  String?
  propertyAppraisal             BigInt?
  propertyType                  PropertyType
  rentalYieldsAnnualCash        Float?
  searchAndAdvertisingFee       BigInt?
  squareMeters                  Int
  startIncomeDate               DateTime?
  studyTitleCost                BigInt?
  totalPropertyCost             BigInt?
  transactionCost               BigInt?
  status                        String       @default("inactivo")
  projectId                     String       @id @default(uuid())
  minInvestmentAmount           Int
  Investment                    Investment[]
}

model Transaction {
  amount            BigInt
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  transactionId     String            @id @default(uuid())
  type              TransactionType
  wallet            Wallet            @relation(fields: [walletId], references: [walletId])
  walletId          String
  paymentMethodType String?
  investmentId      String?
  reference         String?           @unique
  externalId        String?           @unique
  investment        Investment?       @relation(fields: [investmentId], references: [investmentId])
  status            TransactionStatus @default(PENDING)
}

model Investment {
  amount       BigInt
  createdAt    DateTime      @default(now())
  investmentId String        @id @default(uuid())
  userId       String
  projectId    String
  project      Project       @relation(fields: [projectId], references: [projectId])
  user         User          @relation(fields: [userId], references: [userId])
  Transaction  Transaction[]
}

model Wallet {
  walletId     String        @id @default(uuid())
  userId       String        @unique
  balance      BigInt        @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [userId])
  Transactions Transaction[]
}

enum Role {
  admin
  user
}

enum PropertyType {
  viviendaDeInteresSocial
  viviendaDeInteresPrioritario
}

enum TransactionType {
  RECHARGE
  SPEND
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  APPROVED
  VOIDED
  DECLINED
  ERROR
}
